{"version":3,"file":"static/js/878.f86f92d4.chunk.js","mappings":"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","sources":["components/LoadingSpinner/LoadingSpinner.js","pages/Register/Register.js","store/selectors/spinnerSelectors.js"],"sourcesContent":["import \"./LoadingSpinner.css\";\r\n\r\nfunction LoadingSpinner(props) {\r\n    return (\r\n        <div className=\"spinner\">\r\n        <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingSpinner","import { useState } from \"react\"\r\nimport { connect, useDispatch } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { registerAction } from \"../../store/actions/authActions\"\r\nimport \"./Register.css\"\r\nimport { isLoading } from \"../../store/selectors/spinnerSelectors\"\r\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\"\r\n\r\nfunction Register(props) {\r\n\r\n    const [email,setEmail] = useState('')\r\n    const [password,setPassword] = useState('')\r\n    const [repeatPassword,setRepeatPassword] = useState('')\r\n\r\n    let errorsObj = {email:'',password:'',repeatPassword:''}\r\n    const [errors,setErrors] = useState(errorsObj)\r\n\r\n    const navigation = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    function onRegister(e) {\r\n        e.preventDefault()\r\n        \r\n        let error = false;\r\n        let errorObj = {...errorsObj}\r\n\r\n        if(email === '') {\r\n            error = true;\r\n            errorObj.email = 'Email is required'\r\n        }\r\n\r\n        if(password === '') {\r\n            error = true;\r\n            errorObj.password = 'Password is required'\r\n        }\r\n\r\n        if(repeatPassword === '') {\r\n            error = true;\r\n            errorObj.repeatPassword = 'Repeat Password is required'\r\n        }\r\n\r\n        setErrors(errorObj)\r\n\r\n        if(error) {\r\n            return;\r\n        }\r\n\r\n        dispatch(registerAction(email,password,repeatPassword,navigation))\r\n    }\r\n\r\n    return (\r\n        <div className=\"register-outer-container\">\r\n            {props.isLoading && <LoadingSpinner />}\r\n            <h1>Register Page</h1>\r\n\r\n        <div className=\"register-container\">\r\n\r\n        <div className=\"register-form-container\">\r\n            <form onSubmit={onRegister}>\r\n\r\n        <div>\r\n            <label >Email</label>\r\n            <input \r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)} />\r\n\r\n            {errors.email && <div className=\"validation-error\">{errors.email}</div>}\r\n\r\n        </div>\r\n\r\n        <div>\r\n            <label>Password</label>\r\n            <input \r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)} />\r\n\r\n            {errors.password && <div className=\"validation-error\">{errors.password}</div>}\r\n\r\n        </div>\r\n\r\n        <div>\r\n            <label >Repeat Password</label>\r\n            <input \r\n            type=\"password\"\r\n            value={repeatPassword}\r\n            onChange={(e) => setRepeatPassword(e.target.value)} />\r\n\r\n            {errors.repeatPassword && <div className=\"validation-error\">{errors.repeatPassword}</div>}\r\n\r\n        </div>\r\n\r\n        <div className=\"register-btn\">\r\n            <button type=\"submit\">Register</button>\r\n        </div>\r\n\r\n            </form>\r\n\r\n            {props.errorMessage && <div className=\"validation-error\">{props.errorMessage}</div>}\r\n\r\n        </div>\r\n\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        isLoading: isLoading(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Register)","\r\nexport function isLoading(state) {\r\n    if(state.spinner.isLoading) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"],"names":["props","_jsx","className","children","_jsxs","connect","state","errorMessage","auth","isLoading","email","setEmail","useState","password","setPassword","repeatPassword","setRepeatPassword","errorsObj","errors","setErrors","navigation","useNavigate","dispatch","useDispatch","LoadingSpinner","onSubmit","e","preventDefault","error","errorObj","registerAction","type","value","onChange","target","spinner"],"sourceRoot":""}