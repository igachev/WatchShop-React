{"version":3,"file":"static/js/925.7e6a385d.chunk.js","mappings":"6HAUA,QARA,SAAwBA,GACpB,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAACF,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,WAAWA,EAAAA,EAAAA,KAAA,cAG9J,C,wHCkFA,MAOA,GAAeI,EAAAA,EAAAA,KAPUC,IACd,CACHC,aAAcD,EAAME,KAAKD,aACzBE,WAAWA,EAAAA,EAAAA,GAAUH,MAI7B,EAzFA,SAAeN,GAEf,MAAOU,EAAMC,IAAYC,EAAAA,EAAAA,UAAS,KAC3BC,EAASC,IAAeF,EAAAA,EAAAA,UAAS,IAElCG,EAAY,CAACL,MAAO,GAAGG,SAAU,KAChCG,EAAOC,IAAaL,EAAAA,EAAAA,UAASG,GAE9BG,GAAaC,EAAAA,EAAAA,MACbC,GAAWC,EAAAA,EAAAA,MA4Bb,OACIjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,CACjCH,EAAMS,YAAaR,EAAAA,EAAAA,KAACqB,EAAAA,EAAc,KACnCrB,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gBACRF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAGhCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,MAAA,QAAMmB,SAlClB,SAAiBC,GACbA,EAAEC,iBAEF,IAAIC,GAAQ,EACRC,EAAW,IAAIZ,GAEN,KAAVL,IACCgB,GAAQ,EACRC,EAASjB,MAAQ,qBAGL,KAAbG,IACCa,GAAQ,EACRC,EAASd,SAAW,wBAGxBI,EAAUU,GAEPD,GAIHN,GAASQ,EAAAA,EAAAA,GAAYlB,EAAMG,EAASK,GAExC,EAUoCf,SAAA,EAExBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,YACPF,EAAAA,EAAAA,KAAA,SACA4B,KAAK,QACLC,MAAOpB,EACPqB,SAAWP,GAAMb,EAASa,EAAEQ,OAAOF,YAGtCd,EAAON,QAAST,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAEa,EAAON,SAE3DN,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,eACPF,EAAAA,EAAAA,KAAA,SACA4B,KAAK,WACLC,MAAOjB,EACPkB,SAAWP,GAAMV,EAAYU,EAAEQ,OAAOF,YAGzCd,EAAOH,WAAYZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAEa,EAAOH,YAE9DZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAQ1B,SAAC,eAK7BH,EAAMO,eAAgBN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAEH,EAAMO,sBAOxE,G,iBCvFO,SAASE,EAAUH,GACtB,QAAGA,EAAM2B,QAAQxB,SAIrB,C","sources":["components/LoadingSpinner/LoadingSpinner.js","pages/Login/Login.js","store/selectors/spinnerSelectors.js"],"sourcesContent":["import \"./LoadingSpinner.css\";\r\n\r\nfunction LoadingSpinner(props) {\r\n    return (\r\n        <div className=\"spinner\">\r\n        <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingSpinner","import { useState } from \"react\"\r\nimport { connect, useDispatch } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { loginAction } from \"../../store/actions/authActions\"\r\nimport \"./Login.css\"\r\nimport { isLoading } from \"../../store/selectors/spinnerSelectors\"\r\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\"\r\n\r\nfunction Login(props) {\r\n\r\nconst [email,setEmail] = useState('')\r\nconst [password,setPassword] = useState('')\r\n\r\nconst errorsObj = {email: '',password: ''}\r\nconst [errors,setErrors] = useState(errorsObj)\r\n\r\nconst navigation = useNavigate()\r\nconst dispatch = useDispatch()\r\n\r\nfunction onLogin(e) {\r\n    e.preventDefault();\r\n\r\n    let error = false;\r\n    let errorObj = {...errorsObj}\r\n\r\n    if(email === '') {\r\n        error = true;\r\n        errorObj.email = 'Email is required'\r\n    }\r\n\r\n    if(password === '') {\r\n        error = true;\r\n        errorObj.password = 'Password is required'\r\n    }\r\n\r\n    setErrors(errorObj)\r\n\r\n    if(error) {\r\n        return;\r\n    }\r\n\r\n    dispatch(loginAction(email,password,navigation))\r\n\r\n}\r\n\r\n    return (\r\n        <div className=\"login-outer-container\">\r\n            {props.isLoading && <LoadingSpinner />}\r\n            <h1>Login Page</h1>\r\n        <div className=\"login-container\">\r\n            \r\n\r\n        <div className=\"login-form-container\">\r\n            <form onSubmit={onLogin}>\r\n\r\n            <div>\r\n                <label>Email:</label>\r\n                <input \r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)} />\r\n            </div>\r\n\r\n            {errors.email && <div className=\"validation-error\">{errors.email}</div>}\r\n\r\n            <div>\r\n                <label>Password:</label>\r\n                <input \r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)} />\r\n            </div>\r\n\r\n            {errors.password && <div className=\"validation-error\">{errors.password}</div>}\r\n\r\n            <div className=\"login-btn\">\r\n                <button type=\"submit\">Login</button>\r\n            </div>\r\n\r\n            </form>\r\n\r\n        {props.errorMessage && <div className=\"validation-error\">{props.errorMessage}</div>}\r\n\r\n        </div>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        isLoading: isLoading(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Login)","\r\nexport function isLoading(state) {\r\n    if(state.spinner.isLoading) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"],"names":["props","_jsx","className","children","_jsxs","connect","state","errorMessage","auth","isLoading","email","setEmail","useState","password","setPassword","errorsObj","errors","setErrors","navigation","useNavigate","dispatch","useDispatch","LoadingSpinner","onSubmit","e","preventDefault","error","errorObj","loginAction","type","value","onChange","target","spinner"],"sourceRoot":""}